
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `BudgetConcept` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model BudgetConcept
 * 
 */
export type BudgetConceptModel = runtime.Types.Result.DefaultSelection<Prisma.$BudgetConceptPayload>






export type BudgetConceptCompositeListFilter = {
  equals?: Prisma.BudgetConceptObjectEqualityInput[]
  every?: Prisma.BudgetConceptWhereInput
  some?: Prisma.BudgetConceptWhereInput
  none?: Prisma.BudgetConceptWhereInput
  isEmpty?: boolean
  isSet?: boolean
}

export type BudgetBucketObjectEqualityInput = {
  period: string
  amount: number
}

export type BudgetBucketCreateInput = {
  period: string
  amount: number
}

export type BudgetConceptWhereInput = {
  AND?: Prisma.BudgetConceptWhereInput | Prisma.BudgetConceptWhereInput[]
  OR?: Prisma.BudgetConceptWhereInput[]
  NOT?: Prisma.BudgetConceptWhereInput | Prisma.BudgetConceptWhereInput[]
  name?: Prisma.StringFilter<"BudgetConcept"> | string
  type?: Prisma.EnumCONCEPT_TYPEFilter<"BudgetConcept"> | $Enums.CONCEPT_TYPE
  frequency?: Prisma.EnumCONCEPT_FREQUENCYFilter<"BudgetConcept"> | $Enums.CONCEPT_FREQUENCY
  recurringBudgetAmount?: Prisma.FloatFilter<"BudgetConcept"> | number
  plannedRecurringAmounts?: Prisma.BudgetBucketCompositeListFilter | Prisma.BudgetBucketObjectEqualityInput[]
  actualRecurringAmounts?: Prisma.BudgetBucketCompositeListFilter | Prisma.BudgetBucketObjectEqualityInput[]
}

export type BudgetConceptListUpdateEnvelopeInput = {
  set?: Prisma.BudgetConceptCreateInput | Prisma.BudgetConceptCreateInput[]
  push?: Prisma.BudgetConceptCreateInput | Prisma.BudgetConceptCreateInput[]
  updateMany?: Prisma.BudgetConceptUpdateManyInput
  deleteMany?: Prisma.BudgetConceptDeleteManyInput
}

export type BudgetConceptUpdateManyInput = {
  where: Prisma.BudgetConceptWhereInput
  data: Prisma.BudgetConceptUpdateInput
}

export type BudgetConceptDeleteManyInput = {
  where: Prisma.BudgetConceptWhereInput
}

export type BudgetConceptUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumCONCEPT_TYPEFieldUpdateOperationsInput | $Enums.CONCEPT_TYPE
  frequency?: Prisma.EnumCONCEPT_FREQUENCYFieldUpdateOperationsInput | $Enums.CONCEPT_FREQUENCY
  recurringBudgetAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  plannedRecurringAmounts?: Prisma.XOR<Prisma.BudgetBucketListUpdateEnvelopeInput, Prisma.BudgetBucketCreateInput> | Prisma.BudgetBucketCreateInput[]
  actualRecurringAmounts?: Prisma.XOR<Prisma.BudgetBucketListUpdateEnvelopeInput, Prisma.BudgetBucketCreateInput> | Prisma.BudgetBucketCreateInput[]
}



export type BudgetConceptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
  type?: boolean
  frequency?: boolean
  recurringBudgetAmount?: boolean
  plannedRecurringAmounts?: boolean | Prisma.BudgetBucketDefaultArgs<ExtArgs>
  actualRecurringAmounts?: boolean | Prisma.BudgetBucketDefaultArgs<ExtArgs>
}, ExtArgs["result"]["budgetConcept"]>



export type BudgetConceptSelectScalar = {
  name?: boolean
  type?: boolean
  frequency?: boolean
  recurringBudgetAmount?: boolean
}

export type BudgetConceptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"name" | "type" | "frequency" | "recurringBudgetAmount" | "plannedRecurringAmounts" | "actualRecurringAmounts", ExtArgs["result"]["budgetConcept"]>
export type BudgetConceptInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $BudgetConceptPayload = {
  name: "BudgetConcept"
  objects: {}
  scalars: {
    name: string
    type: $Enums.CONCEPT_TYPE
    frequency: $Enums.CONCEPT_FREQUENCY
    recurringBudgetAmount: number
  }
  composites: {
    plannedRecurringAmounts: Prisma.$BudgetBucketPayload[]
    actualRecurringAmounts: Prisma.$BudgetBucketPayload[]
  }
}

export type BudgetConceptGetPayload<S extends boolean | null | undefined | BudgetConceptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BudgetConceptPayload, S>





/**
 * Fields of the BudgetConcept model
 */
export interface BudgetConceptFieldRefs {
  readonly name: Prisma.FieldRef<"BudgetConcept", 'String'>
  readonly type: Prisma.FieldRef<"BudgetConcept", 'CONCEPT_TYPE'>
  readonly frequency: Prisma.FieldRef<"BudgetConcept", 'CONCEPT_FREQUENCY'>
  readonly recurringBudgetAmount: Prisma.FieldRef<"BudgetConcept", 'Float'>
}
    

// Custom InputTypes
/**
 * BudgetConcept without action
 */
export type BudgetConceptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BudgetConcept
   */
  select?: Prisma.BudgetConceptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BudgetConcept
   */
  omit?: Prisma.BudgetConceptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BudgetConceptInclude<ExtArgs> | null
}
